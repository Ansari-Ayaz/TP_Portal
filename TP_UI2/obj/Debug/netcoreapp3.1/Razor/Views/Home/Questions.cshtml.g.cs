#pragma checksum "C:\Ayaz Practice\TP_API\TP_UI2\Views\Home\Questions.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "52fdbc65a56a7b79c1d45b0514714878d1dcd6bc"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Questions), @"mvc.1.0.view", @"/Views/Home/Questions.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Ayaz Practice\TP_API\TP_UI2\Views\_ViewImports.cshtml"
using Microsoft.AspNetCore.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Ayaz Practice\TP_API\TP_UI2\Views\_ViewImports.cshtml"
using Microsoft.Extensions.Configuration;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Ayaz Practice\TP_API\TP_UI2\Views\_ViewImports.cshtml"
using TP_UI2;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Ayaz Practice\TP_API\TP_UI2\Views\_ViewImports.cshtml"
using TP_UI2.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"52fdbc65a56a7b79c1d45b0514714878d1dcd6bc", @"/Views/Home/Questions.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"cfaebe5931482682b7539322bf968f42a3a626d6", @"/Views/_ViewImports.cshtml")]
    #nullable restore
    public class Views_Home_Questions : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    #nullable disable
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"<style>
    .marg {
        margin: 1rem;
    }
</style>
<div class=""card"">
    <div class=""card-body"">
        <div class=""row"">
            <div class=""col-md-3"">
                <label>Number Of Question :</label>
                <label id=""lbNoQues""></label>
            </div>
            <div class=""col-md-3"">
                <label>Points Per Question :</label>
                <label id=""lbPoQues""></label>
            </div>
            <div class=""col-md-3 qDetail"">
                <label>Time Per Question :</label>
                <label id=""lbTmQues""></label>
            </div>
            <div class=""col-md-3 qDetail"">
                <button id=""btnSave"" type=""button"" class=""btn btn-primary"" onclick=""SaveQuesOpt()"">Save</button>
                <button id=""btnUpdate"" type=""button"" class=""btn btn-primary"" onclick=""UpdateQuesOpt()"">Update</button>
            </div>
        </div>
    </div>
</div>

<div class=""divMain""></div>
<template class=""tmplMain"">
    <div class=""");
            WriteLiteral(@"card"">
        <div class=""card-body"">
            <div class=""row qSet"">
                <div class=""col-md-6 divQues"">
                    <label>Question :${count}</label>
                    <textarea class=""form-control question"" type=""text"" placeholder=""Type Question Here..."" rows=""3""></textarea>
                </div>
                <div class=""col-md-6 divOpt"" qno=""${count}"">
                    <div class=""row marg"">
                        <div class=""col-md-1"">
                            <label>Opt: </label>
                        </div>
                        <div class=""col-sm-7"">
                            <input type=""text"" class=""form-control form-control-sm option"">
                        </div>
                        <div class=""col-sm-1"">
                            <input type=""radio"" name='rad_${count}' class=""radio"" checked>
                        </div>
                        <div class=""col-md-3 last"">
                        </div>
                    </di");
            WriteLiteral(@"v>
                    <div class=""row marg"">
                        <div class=""col-md-1"">
                            <label>Opt: </label>
                        </div>
                        <div class=""col-sm-7"">
                            <input type=""text"" class=""form-control form-control-sm option"">
                        </div>
                        <div class=""col-sm-1"">
                            <input type=""radio"" name='rad_${count}' class=""radio"">
                        </div>
                        <div class=""col-md-3 last"">
                            <button type=""button"" class=""btn btn-sm btn-warning btnAdd"">Add</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</template>

<template class=""tmplOpt"">
    <div class=""row marg"">
        <div class=""col-md-1"">
            <label>Opt: </label>
        </div>
        <div class=""col-sm-7"">
            <input type=""text"" class=");
            WriteLiteral(@"""form-control form-control-sm option"">
        </div>
        <div class=""col-sm-1"">
            <input type=""radio"" name=""rad_${qno}"" class=""radio"">
        </div>
        <div class=""col-md-3 last"">
            <button type=""button"" class=""btn btn-sm btn-warning btnAdd"">Add</button>
        </div>
    </div>
</template>
<template class=""tmplAdd"">
    <button type=""button"" class=""btn btn-sm btn-warning btnAdd"">Add</button>
</template>
<template class=""tmplRmv"">
    <button type=""button"" class=""btn btn-sm btn-danger btnRemove"">Remove</button>
</template>

");
            WriteLiteral(@"<!-- count, qText, optRow -->
<template id=""tmplMain_Edit"">
    <div class=""card"">
        <div class=""card-body"">
            <div class=""row qSet"">
                <div class=""col-md-6 divQues"" >
                    <label>Question :${count}</label>
                    <textarea class=""form-control question"" qid=${qId} type=""text"" placeholder=""Type Question Here..."" rows=""3"">${qText}</textarea>
                </div>
                <div class=""col-md-6 divOpt"" qno=""${count}"">
                    ${optRow}
                </div>
            </div>
        </div>
    </div>
</template>
<template id=""tmplOptRow_Edit"">
    <div class=""row marg"" optid=${optId}>
        <div class=""col-md-1"">
            <label>Opt: </label>
        </div>
        <div class=""col-sm-7"">
            <input type=""text"" value=""${optText}"" class=""form-control form-control-sm option""/>
        </div>
        <div class=""col-sm-1"">
            <input type=""radio"" name='rad_${count}' class=""radio"" ${iscorrect} ");
            WriteLiteral("/>\r\n        </div>\r\n        <div class=\"col-md-3 last\">\r\n        </div>\r\n    </div>\r\n</template>\r\n");
            DefineSection("Scripts", async() => {
                WriteLiteral(@"
<script>
    var params = new URLSearchParams(window.location.search)
    var id = params.get('Id');

    $(document).ready(function(){
       var test = GetTestById(id);
       if(test.questions==null){
            AddNewQuestionSet(test.tDetail);
            $(""#btnSave"").show();
           $(""#btnUpdate"").hide();
       }else{
           SetQuestionSet(test);
           $(""#btnSave"").hide();
           $(""#btnUpdate"").show();
       }
       console.log(test);
    })

    function GetTestById(id){
        var test = null;
        $.ajax({
            url: baseUrl + ""tp/GetQuesOptByTestId/""+id,
            type:""GET"",
            contentType:""application/json"",
            async:false,
            dataType:""JSON"",
            success:function(resp){
                test = resp.respObj;
            },
            error:function(err){
                test = null;
            }
        })
        return test;
    }
    function AddNewQuestionSet(testDetail) {

        $(""");
                WriteLiteral(@"#lbNoQues"").text(testDetail.no_Of_Q)
        $(""#lbPoQues"").text(testDetail.perQ_Point)
        $(""#lbTmQues"").text(testDetail.perQ_Time_Min)
        var count = 1;
            while (count <= testDetail.no_Of_Q) {
                $("".divMain"").append(eval('`' + $("".tmplMain"").html() + '`'));
                count++;
            }

    }

    function SetQuestionSet(data){
        $(""#lbNoQues"").text(data.tDetail.no_Of_Q);
        $(""#lbPoQues"").text(data.tDetail.perQ_Point);
        $(""#lbTmQues"").text(data.tDetail.perQ_Time_Min);
        //count, qText, optRow
        var html = '';
        var count = 1;
        data.questions.forEach(q=>{
            var qId = q.qId;
            var qText = q.questionText;
            var optRow = '';
            
            q.options.forEach(o=>{
                //optText, isCorrect
                var optId = o.optId;
                var optText = o.optionText;
                var iscorrect = (o.isCorrect) ? 'checked' : '';
                o");
                WriteLiteral(@"ptRow += eval('`'+$(""#tmplOptRow_Edit"").html()+'`')
            })
            html+= eval('`'+$(""#tmplMain_Edit"").html()+'`');
            count++;
        });
        $('.divMain').append(html);
    }

    function SaveQuesOpt(){
        var qSaveReq = {
            loggedInUser:user.UserId,
            testId:parseInt(id),
            questions:[]
        }
        $("".divMain .qSet"").each(function(){
            var qSet = {
                questionText:$(this).find('textarea').val(),
                options:[]
            }
            $(this).find('.divOpt .row').each(function(){
                var optSet = {
                    optionText:$(this).find('.option').val(),
                    isCorrect:$(this).find('.radio').prop('checked')
                }
                qSet.options.push(optSet);
            })
            qSaveReq.questions.push(qSet);
        })
        $.ajax({
            url: baseUrl + ""tp/SaveQuesAns"",
            type:""POST"",
            contentTy");
                WriteLiteral(@"pe:""application/json"",
            async:false,
            data:JSON.stringify(qSaveReq),
            success:function(resp){
                Swal.fire('Saved','Saved Successfully','success')
            },
            error:function(err){
                Swal.fire('OOPS','Failed to Save','error')
            }
        })
    }
    function UpdateQuesOpt(){
        var qUpdateReq = {
            loggedInUser:user.UserId,
            testId:parseInt(id),
            questions:[]
        }
        $("".divMain .qSet"").each(function(){
            var qSet = {
                qId:$(this).find('textarea').attr('qid'),
                questionText:$(this).find('textarea').val(),
                options:[]
            }
            $(this).find('.divOpt .row').each(function(){
                var optSet = {
                    optId:$(this).find('textarea').attr('optid'),
                    optionText:$(this).find('.option').val(),
                    isCorrect:$(this).find('.radio').pro");
                WriteLiteral(@"p('checked')
                }
                qSet.options.push(optSet);
            })
            qUpdateReq.questions.push(qSet);
        })
        $.ajax({
            url: baseUrl + ""tp/UpdateQuesAns"",
            type:""POST"",
            contentType:""application/json"",
            async:false,
            data:JSON.stringify(qUpdateReq),
            success:function(resp){
                Swal.fire('Saved','Update Successfully','success')
            },
            error:function(err){
                Swal.fire('OOPS','Failed to Save','error')
            }
        })
    }

    $(document).on('click','.btnAdd',function(){
        var mainDiv = $(this).closest('.divOpt');
        var qno = $(this).closest('.divOpt').attr('qno');
        $(this).closest('.divOpt').append(eval('`'+ $("".tmplOpt"").html() +'`'));
        $(this).remove();
        ManageButtons(mainDiv);
    })
    $(document).on('click','.btnRemove',function(){
        var mainDiv = $(this).closest('.divOpt');");
                WriteLiteral(@"
        $(this).closest('.row').remove();
        ManageButtons(mainDiv);
    })

    function ManageButtons(el){
        var options = $(el).find('.row').length;
        if(options==2){
            $(el).find('.btnRemove').remove();
        }
        if(options>2){
            $(el).find('.btnRemove').remove();
            $(el).find('.row').each(function(){
                $(this).find('.last').append($('.tmplRmv').html())
            })
        }
        $(el).find('.btnAdd').remove();
        if(options<4){
            $(el).find('.row').last().find('.last').prepend($('.tmplAdd').html())
        }
    }
</script>
");
            }
            );
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public IHttpContextAccessor _hca { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public IConfiguration _config { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
